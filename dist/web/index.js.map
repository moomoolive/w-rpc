{
  "version": 3,
  "sources": ["../../src/index.ts"],
  "sourcesContent": ["import {transferData, TransferValue} from \"./transfer\"\n\ntype RpcResponse<State extends object> = (\n    (() => any)\n    | ((param: any) => any)\n    | ((param: any, state: State) => any)\n)\n\ntype RpcOutboundAction = (\n    (() => any)\n    | ((param: any) => any)\n    | ((param: any, state: any) => any)\n)\n\ntype TerminalOutboundActions = {\n    readonly [key: string]: RpcOutboundAction\n}\n\nexport type TerminalActions<State extends object> = {\n    readonly [key: string]: RpcResponse<State>\n}\n\ntype TransferableFunctionReturn<T> = T extends TransferValue<infer ValueType>\n    ? ValueType\n    : T\n\nexport type RpcReturn<T> = T extends Promise<infer PromiseResolve>\n    ? Promise<TransferableFunctionReturn<PromiseResolve>>\n    : Promise<TransferableFunctionReturn<T>>\n\nexport type MessageContainer = {\n    handle: string\n    id: number\n    respondingTo: number\n    data: unknown\n}\n\ntype TerminalActionTuples<\n    T extends TerminalOutboundActions\n> = {\n    [key in keyof T]: Parameters<T[key]> extends ([param: any] | [param: any, state: any])\n        ? Parameters<T[key]>[0] extends (null | undefined)\n            ? [] : [param: Parameters<T[key]>[0]]\n        : []\n}\n\nexport const OUTBOUND_MESSAGE = -1\nexport const ERROR_RESPONSE_HANDLE = \"__x_rpc_error__\"\nexport const RESPONSE_HANDLE = \"__x_rpc_response__\"\n\nexport type MessageHandler = (event: {data: unknown, source: MessagableEntity} | {data: unknown}) => unknown\n\nexport type MessagableEntity = {\n    postMessage: (data: any, transferables: Transferable[]) => unknown\n    addEventListener: (event: \"message\", handler: MessageHandler) => unknown\n    removeEventListener: (event: \"message\", handler: MessageHandler) => unknown\n}\n\nexport type MessageTarget = {\n    postMessage: (data: any, transferables: Transferable[]) => unknown\n}\n\ntype RpcConfig<State extends object> = {\n    messageTarget: MessagableEntity\n    responses: TerminalActions<State>,\n    state: State\n}\n\nconst emptyTransferArray = [] as Transferable[]\n\nexport class wRpc<\n    RecipentActions extends TerminalOutboundActions,\n    State extends object = {},\n> {\n    static transfer = transferData\n\n    private idCount: number\n    private queue: Array<{\n        id: number\n        resolve: (data: any) => void\n        reject: (reason: any) => void\n    }>\n    private actionsIndex: Map<string, RpcResponse<State>>\n    private messageContainer: MessageContainer\n    private messageTarget: MessagableEntity\n    private messageHandlerRef: MessageHandler\n    \n    state: State\n\n    constructor({\n        responses,\n        messageTarget,\n        state\n    }: RpcConfig<State>) {\n        const self = this\n        this.state = state\n        this.messageTarget = messageTarget\n        this.messageHandlerRef = (event) => {\n            self.consumeMessage(\n                event.data as MessageContainer,\n                (\"source\" in event) ? event.source || null : null\n            )\n        }\n        this.messageTarget.addEventListener(\"message\", self.messageHandlerRef)\n        \n        this.idCount = 0\n        this.queue = []\n        this.messageContainer = {\n            handle: \"\",\n            id: -1,\n            respondingTo: OUTBOUND_MESSAGE,\n            data: null\n        }\n\n        this.actionsIndex = new Map()\n        const actionKeys = Object.keys(responses)\n        for (let index = 0; index < actionKeys.length; index++) {\n            const element = actionKeys[index]\n            this.actionsIndex.set(element, responses[element])\n        }\n    }\n\n    cleanup(): boolean {\n        this.messageTarget.removeEventListener(\"message\", this.messageHandlerRef)\n        return true\n    }\n\n    replaceMessageTarget(messageTarget: MessagableEntity): boolean {\n        const self = this\n        this.cleanup()\n        this.messageTarget = messageTarget\n        this.messageTarget.addEventListener(\"message\", (event) => {\n            self.consumeMessage(\n                event.data as MessageContainer,\n                (\"source\" in event) ? event.source || null : null\n            )\n        })\n        return true\n    }\n\n    async executeWithSource<T extends keyof RecipentActions>(\n        name: T & string,\n        source: MessageTarget,\n        data: Parameters<RecipentActions[T]>[0] extends undefined ? null : Parameters<RecipentActions[T]>[0], \n        transferables?: Transferable[]\n    ) {\n        return await this.outboundMessage(\n            source, name, data, transferables\n        ) as RpcReturn<ReturnType<RecipentActions[T]>>\n    }\n\n    execute<T extends keyof RecipentActions>(\n        name: T & string,\n        ...args: TerminalActionTuples<RecipentActions>[T] extends [params: any]\n            ? (\n                [param: TerminalActionTuples<RecipentActions>[T][0]]\n                | [param: TerminalActionTuples<RecipentActions>[T][0], transferables: Transferable[]]\n            )\n            : []\n    ): Promise<RpcReturn<ReturnType<RecipentActions[T]>>>\n    async execute<T extends keyof RecipentActions>(\n        name: T & string,\n        param: null = null ,\n        transferables: Transferable[] = []\n    ): Promise<RpcReturn<ReturnType<RecipentActions[T]>>> {\n        return await this.outboundMessage(\n            this.messageTarget, name, param, transferables\n        ) as RpcReturn<ReturnType<RecipentActions[T]>>\n    }\n\n    private outboundMessage(\n        source: MessageTarget,\n        handle: string,\n        data: unknown = null,\n        transferables: Transferable[] = emptyTransferArray\n    ) {\n        const self = this\n        return new Promise((resolve, reject) => {\n            const id = this.idCount\n            self.queue.push({id, resolve, reject})\n            self.transferMessage(\n                source, \n                handle, \n                OUTBOUND_MESSAGE, \n                data, \n                transferables\n            )\n        })\n    }\n\n    private responseMessage(\n        source: MessagableEntity | null,\n        respondingTo: number, \n        data: unknown\n    ) {\n        const transfer = (\n            typeof data === \"object\"\n            && data !== null\n            && (data as TransferValue<unknown>).__x_tdata__ === true\n        )\n        this.transferMessage(\n            source,\n            RESPONSE_HANDLE, \n            respondingTo, \n            transfer ? (data as TransferValue<any>).value : data, \n            transfer ? (data as TransferValue<any>).transferables : emptyTransferArray\n        )\n    }\n\n    private errorResponseMessage(\n        source: MessagableEntity | null,\n        respondingTo: number, \n        errorMessage: string\n    ) {\n        this.transferMessage(\n            source,\n            ERROR_RESPONSE_HANDLE, \n            respondingTo, \n            errorMessage\n        )\n    }\n\n    private transferMessage(\n        source: MessageTarget | null,\n        handle: string,\n        respondingTo: number, \n        data: unknown,\n        transferables?: Transferable[]\n    ) {\n        const {messageContainer} = this\n        const id = this.idCount++\n        messageContainer.handle = handle\n        messageContainer.respondingTo = respondingTo\n        messageContainer.data = data ?? null\n        messageContainer.id = id\n        const entity = source || this.messageTarget\n        entity.postMessage(\n            messageContainer, \n            transferables || emptyTransferArray\n        )\n        return id\n    }\n\n    private async consumeMessage(\n        message: MessageContainer,\n        source: MessagableEntity | null\n    ) {\n        if (message === null || typeof message !== \"object\") {\n            console.warn(\"recieved message was not an object ignoring message\", message)\n            return\n        }\n\n        if (\n            message.handle === RESPONSE_HANDLE\n            || message.handle === ERROR_RESPONSE_HANDLE\n        ) {\n            const {queue} = this\n            for (let index = 0; index < queue.length; index++) {\n                const element = queue[index]\n                if (message.respondingTo === element.id) {\n                    if (message.handle === ERROR_RESPONSE_HANDLE) {\n                        element.reject(message.data)\n                    } else {\n                        element.resolve(message.data)\n                    }\n                    queue.splice(index, 1)\n                    return\n                }\n            }\n            console.warn(\"incoming response doesn't map to any queued message. ignoring\", message)\n            return\n        }\n\n        if (!this.actionsIndex.has(message.handle)) {\n            this.errorResponseMessage(\n                source,\n                message.id,\n                `attempted to call non-existent handler \"${message.handle}\"`\n            )\n            return\n        }\n\n        if (\n            message.respondingTo === OUTBOUND_MESSAGE \n            && message.data !== undefined\n        ) {\n            const handler = this.actionsIndex.get(message.handle)!\n            try {\n                const data = await handler(message.data, this.state) ?? null\n                this.responseMessage(source, message.id, data)\n            } catch (err) {\n                this.errorResponseMessage(\n                    source,\n                    message.id,\n                    `rpc function \"${message.handle}\" encountered an exception. ${err} ${(err as Error)?.stack || \"no-stack\"}`\n                )\n            }\n            return\n        }\n        console.warn(\"incoming message is neither a response to a previous message or a request to perform an action. ignoring message\", message)\n        return\n    }\n\n    addResponses(\n        responses: TerminalActions<State>, \n        {allowOverwrite = false} = {}\n    ): boolean {\n        const actionKeys = Object.keys(responses)\n        let added = false\n        for (let index = 0; index < actionKeys.length; index++) {\n            const element = actionKeys[index]\n            if (!allowOverwrite && this.actionsIndex.has(element)) {\n                continue\n            }\n            added = true\n            this.actionsIndex.set(element, responses[element])\n        }\n        return added\n    }\n}\n"],
  "mappings": "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",
  "names": ["transferData", "emptyTransferArray", "responses", "messageTarget", "state", "self", "event", "actionKeys", "index", "element", "name", "source", "data", "transferables", "param", "handle", "resolve", "reject", "id", "respondingTo", "transfer", "errorMessage", "messageContainer", "message", "queue", "handler", "err", "allowOverwrite", "added"]
}
